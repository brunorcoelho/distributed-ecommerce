version: '3.8'

services:
  # Banco de dados para Order Service
  postgres-orders:
    image: postgres:15
    environment:
      POSTGRES_DB: order_service_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d order_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banco de dados para Inventory Service
  postgres-inventory:
    image: postgres:15
    environment:
      POSTGRES_DB: inventory_service_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
    ports:
      - "5433:5432"  # Porta diferente para evitar conflito
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: ../inventory-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory_service_db
      - SPRING_DATASOURCE_USERNAME=inventory_user
      - SPRING_DATASOURCE_PASSWORD=inventory_password
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
    depends_on:
      postgres-inventory:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/inventory/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Order Service
  order-service:
    build:
      context: ../order-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-orders:5432/order_service_db
      - SPRING_DATASOURCE_USERNAME=order_user
      - SPRING_DATASOURCE_PASSWORD=order_password
      - INVENTORY_SERVICE_URL=http://inventory-service:8081
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
    depends_on:
      postgres-orders:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/orders/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - VITE_INVENTORY_SERVICE_URL=http://localhost:8081
      - VITE_ORDER_SERVICE_URL=http://localhost:8080
    depends_on:
      order-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    networks:
      - ecommerce-network

volumes:
  postgres_orders_data:
  postgres_inventory_data:

networks:
  ecommerce-network:
    driver: bridge
